
**1. Perbedaan Stop and Wait vs. Sliding Window:**
* **Stop and Wait:** Kirim 1 *frame*, tunggu ACK, lalu kirim berikutnya. Sangat tidak efisien *bandwidth* karena banyak waktu terbuang menunggu.
* **Sliding Window:** Kirim beberapa *frame* sekaligus dalam "jendela" tanpa menunggu setiap ACK. Jauh lebih efisien *bandwidth* karena jalur terisi penuh.

**2. Fungsi Kompresi Data, Multiplexing, dan ARQ:**
* **Kompresi Data:** Mengecilkan ukuran data untuk mengurangi *bandwidth* yang dibutuhkan.
* **Multiplexing:** Menggabungkan banyak sinyal ke satu saluran fisik agar saluran termanfaatkan optimal.
* **ARQ (Automatic Repeat reQuest):** Mengulang kirim data yang rusak/hilang untuk menjamin keandalan, menghemat *bandwidth* dari pengiriman ulang seluruhnya.

**3. Keefektifan Parity Check, CRC, dan Checksum:**
* **Parity Check:** Sangat sederhana, hanya deteksi kesalahan tunggal. Tidak efektif untuk kesalahan ganda/banyak.
* **CRC (Cyclic Redundancy Check):** Lebih kompleks dan sangat efektif mendeteksi berbagai jenis kesalahan, termasuk *burst errors*.
* **Checksum:** Lebih baik dari Parity Check, lebih sederhana dari CRC, namun kurang kuat mendeteksi *burst errors* tertentu.

**4. Peran TCP/IP dan UDP di Jaringan Latensi Rendah & Keandalan Tinggi:**
* **TCP (Transmission Control Protocol):** Paling cocok. Memberikan keandalan tinggi (jaminan pengiriman, urutan data) dengan *overhead* latensi yang masih bisa ditoleransi di jaringan yang baik. Digunakan untuk HTTP, FTP, dll.
* **IP (Internet Protocol):** Menyediakan pengalamatan dan *routing* dasar yang efisien (latensi rendah), namun tidak ada jaminan keandalan. Keandalan ditangani oleh TCP.
* **UDP (User Datagram Protocol):** Sangat rendah latensi karena minimal *overhead*, namun tidak ada jaminan keandalan (data bisa hilang/tidak berurutan). Cocok untuk aplikasi *real-time* (streaming, game online) di mana kehilangan sedikit data lebih baik daripada penundaan.

**Kesimpulan:** Untuk jaringan dengan **latensi rendah dan keandalan tinggi**, **TCP adalah pilihan utama** karena secara intrinsik menawarkan keandalan yang kuat, sementara UDP hanya digunakan jika latensi mutlak adalah prioritas dan aplikasi dapat mengelola kehilangan data sendiri.





Tentu, mari kita jelaskan lebih detail dengan bahasa yang lebih sederhana:

**1. Perbedaan Stop and Wait vs. Sliding Window:**

* **Stop and Wait:** Bayangkan Anda mengirim paket pos satu per satu. Setelah mengirim satu paket, Anda harus menunggu konfirmasi bahwa paket itu sampai di tujuan sebelum Anda boleh mengirim paket berikutnya.
    * **Dampak:** Lambat dan banyak waktu terbuang (saluran komunikasi sering kosong) karena harus selalu menunggu konfirmasi. Mirip dengan antrean yang sangat panjang dan hanya boleh maju satu per satu.
* **Sliding Window:** Bayangkan Anda bisa mengirim beberapa paket pos sekaligus (misalnya, 5 paket) tanpa harus menunggu konfirmasi satu per satu. Setelah mengirim 5 paket, baru Anda menunggu konfirmasi untuk paket-paket tersebut.
    * **Dampak:** Jauh lebih cepat dan efisien. Saluran komunikasi bisa terus terisi dengan data, memaksimalkan penggunaan *bandwidth*. Mirip dengan jalur tol di mana banyak mobil bisa melaju bersamaan.

**2. Fungsi Kompresi Data, Multiplexing, dan ARQ:**

* **Kompresi Data:** Mengecilkan ukuran file data.
    * **Tujuan:** Agar data lebih cepat terkirim (karena ukurannya kecil) dan menghemat "jalur" atau *bandwidth* yang digunakan. Contoh: mengecilkan ukuran foto JPG.
* **Multiplexing:** Menggabungkan beberapa komunikasi menjadi satu "jalur" utama.
    * **Tujuan:** Memanfaatkan satu jalur komunikasi yang mahal secara maksimal. Contoh: Beberapa percakapan telepon bisa melewati satu kabel serat optik yang sama secara bersamaan.
* **ARQ (Automatic Repeat reQuest):** Mekanisme untuk meminta pengiriman ulang data jika ada yang rusak atau hilang.
    * **Tujuan:** Memastikan data sampai dengan benar dan lengkap. Ini penting untuk keandalan komunikasi. Jika ada sedikit bagian data yang hilang, hanya bagian itu yang diulang kirim, tidak perlu seluruh data.

**3. Keefektifan Parity Check, CRC, dan Checksum:**

Ini semua adalah cara untuk mendeteksi apakah ada kesalahan pada data yang dikirim:

* **Parity Check:** Metode paling sederhana. Ibaratnya, hanya menghitung ganjil/genapnya jumlah angka 1 dalam data.
    * **Kemampuan:** Sangat dasar, hanya bisa mendeteksi jika *satu* bit data berubah. Jika dua bit berubah, dia bisa "tertipu" dan tidak mendeteksi kesalahan.
* **CRC (Cyclic Redundancy Check):** Metode yang lebih canggih. Menggunakan perhitungan matematika yang lebih rumit pada data.
    * **Kemampuan:** Sangat kuat dan efektif mendeteksi berbagai jenis kesalahan, termasuk banyak bit yang berubah secara berdekatan (*burst errors*). Sering dipakai di jaringan komputer modern.
* **Checksum:** Metode tengah-tengah. Menjumlahkan nilai-nilai dalam data.
    * **Kemampuan:** Lebih baik dari Parity Check, tapi tidak sekuat CRC. Masih ada kemungkinan kesalahan yang lolos deteksi.

**4. Peran TCP/IP dan UDP di Jaringan Latensi Rendah & Keandalan Tinggi:**

Ini adalah dua protokol (aturan komunikasi) utama di internet:

* **TCP (Transmission Control Protocol):** Ini adalah protokol yang "bertanggung jawab" dan "teliti".
    * **Karakteristik:**
        * **Handal:** Menjamin data sampai dengan utuh, berurutan, dan tanpa kesalahan (dengan fitur seperti konfirmasi, pengiriman ulang otomatis jika hilang).
        * **Ada Overhead:** Karena ketelitiannya, ada sedikit "biaya" tambahan dalam bentuk waktu pemrosesan dan konfirmasi, yang bisa menambah latensi (penundaan).
    * **Cocok untuk:** Aplikasi yang butuh data sampai 100% benar, meskipun ada sedikit penundaan. Contoh: Browse web (kalau gambarnya putus-putus, kan tidak nyaman), transfer file (file harus utuh), email.

* **IP (Internet Protocol):** Ini adalah dasar untuk alamat dan pengiriman paket di internet.
    * **Karakteristik:** Bertugas mengirim paket dari satu titik ke titik lain. Tidak menjamin paket itu sampai atau utuh. TCP membangun keandalannya di atas IP.
    * **Cocok untuk:** Fondasi jaringan yang cepat karena sederhana.

* **UDP (User Datagram Protocol):** Ini adalah protokol yang "tidak peduli" dan "cepat".
    * **Karakteristik:**
        * **Tidak Handal:** Tidak menjamin data sampai, tidak ada konfirmasi, tidak ada pengiriman ulang jika hilang.
        * **Sangat Rendah Latensi:** Karena tidak ada proses konfirmasi atau jaminan, dia sangat cepat.
    * **Cocok untuk:** Aplikasi di mana kecepatan sangat penting, dan kehilangan sedikit data masih bisa diterima atau ditoleransi. Contoh: *Streaming* video/audio (*buffer* sedikit lebih baik daripada jeda panjang), game *online* (*lag* sedikit lebih baik daripada tiba-tiba berhenti karena menunggu data), panggilan suara (VoIP).

**Kesimpulan:**
Untuk jaringan yang ingin **cepat (latensi rendah)** tapi juga **sangat dapat diandalkan (keandalan tinggi)**:

* **TCP adalah pilihan utama yang seimbang.** Dia cepat (karena latensi jaringannya rendah) dan juga sangat handal.
* **UDP digunakan hanya jika kecepatan mutlak adalah yang terpenting,** dan Anda bersedia mengorbankan sebagian keandalan, atau aplikasi Anda punya cara sendiri untuk mengatasi data yang hilang/rusak.
